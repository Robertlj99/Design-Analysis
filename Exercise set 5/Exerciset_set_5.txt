1) This implementation will result in at most ceiling(log_3 n) levels with each level doing c*n (where c is a constant) amount of work. The total work done, ignoring constant factors and lower ordered terms, is thus # of levels * work done per level = log n * n = n log n

2) (a) T(n) <= T(n/2) + 1


(b) Using the master method, a = 1, b = 2, and d = 0

    - a = 1 = 2^0 = b^d, therefore we are in case 1

    - Case 1 states T(n) = O(n^d log n) = O(n^0 log n) = O(log n)

  Using induction

    - T(n) = O(log n) == T(n) <= c * log n

    - Base case: T(2) <= c * log 2, where c >= 2

    - Inductive Hypothesis: for all n >= 2, T(n) <= c * log n

    - T(n) = T(n/2) + 1 <= c * log(n/2) + 1

    - c * log(n/2) + 1 == c(log n - log 2) + 1 == c * log n - c + 1

    - c * log n - c + 1 <= c * log n, for all n > 0 and c >= 1

Thus for all n >= 2 and c >= 2, T(n) = O(log n)

3) Using the master method:

a = 3, b = 2, d = 1


3 > 2^1 = b^d, therefore case 3


T(n) = O(n^log_b a)


T(n) = O(n^log_2 3)

T(n) = O(n^1.58)

4) Using master method:

Case 3

O(n^log_2 7)

O(n^2.81)

5) Master Method:

Case 2

O(n^2)

6) Master method:

Case 3

O(n log n)